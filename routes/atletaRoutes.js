// routes/atletaRoutes.js
import express from "express";
import mongoose from "mongoose"; // Necess√°rio para converter IDs para ObjectId
import { extrairClubeId } from "../middlewares/auth.js";
import AtletaService from "../services/AtletaService.js";
import { generateRoutes } from "./base/baseRoute.js";

const router = express.Router();
const atletaService = new AtletaService();

// Aplica o middleware para injetar `req.usuario`
router.use(extrairClubeId);

// GET personalizado com filtro (por clube e/ou modalidade)
router.get("/", async (req, res) => {
 try {
  // O clubeId j√° vem como string do middleware `extrairClubeId`
  const clubeIdDoUsuario = req.usuario.clubeId;

  console.log("üì• GET /api/atletas - Requisi√ß√£o de:", {
 nome: req.usuario.nome,
 userId: req.usuario._id.toString(),
 clubeId: clubeIdDoUsuario, // O ID do clube do usu√°rio logado
 tipo: req.usuario.tipo,
 queryParams: req.query // Loga todos os par√¢metros de query recebidos
  });

  let filter = {}; // Objeto que construir√° o filtro para o Mongoose
  const populateOptions = ["modalidade"]; // Queremos sempre popular a modalidade

  // Captura o ID da modalidade da query string, se estiver presente (ex: ?modalidade=ID)
  const modalidadeId = req.query.modalidade;

  if (req.usuario.tipo === "superAdmin") {
 // Para superAdmin, o filtro √© opcional. Se modalidadeId for fornecido, filtramos por ela.
 if (modalidadeId) {
  filter.modalidade = new mongoose.Types.ObjectId(modalidadeId);
 }
  } else {
 // Para outros usu√°rios, sempre filtramos pelo clubeId do usu√°rio logado.
 if (!clubeIdDoUsuario) {
  console.error("‚ùå Erro: clubeId do usu√°rio n√£o encontrado na sess√£o.");
  return res.status(400).json({ error: "ID do clube do usu√°rio n√£o encontrado na sess√£o." });
 }
 filter.clubeId = new mongoose.Types.ObjectId(clubeIdDoUsuario); // Converte para ObjectId

 // Se um modalidadeId tamb√©m for fornecido, adicione-o ao filtro
 if (modalidadeId) {
  filter.modalidade = new mongoose.Types.ObjectId(modalidadeId); // Converte para ObjectId
 }
  }

  // Log para depura√ß√£o: mostra o filtro exato que ser√° usado na consulta ao servi√ßo
  console.log("‚û°Ô∏è Filtro final passado para AtletaService.findAll:", filter);

  // Chama o m√©todo findAll do servi√ßo, que agora precisa aceitar o filtro e as op√ß√µes de populate
  const atletas = await atletaService.findAll(filter, populateOptions);

  res.status(200).json(atletas);
 } catch (err) {
  console.error("‚ùå Erro no GET /atletas:", err);
  res.status(500).json({ error: "Erro ao buscar atletas", details: err.message });
 }
});

router.post("/", async (req, res) => {
 try {
  // Garante que o clubeId do usu√°rio seja adicionado ao novo atleta
  // Se req.body j√° tiver um clubeId, ele ser√° sobrescrito ou mesclado
  const dataToCreate = {
 ...req.body,
 clubeId: req.usuario.clubeId // Adiciona o clubeId do usu√°rio logado
  };
  const novo = await atletaService.create(dataToCreate, req.usuario);
  res.status(201).json(novo);
 } catch (err) {
  console.error("‚ùå Erro ao criar atleta:", err);
  res.status(500).json({ error: "Erro ao criar atleta", details: err.message });
 }
});

const generated = generateRoutes(atletaService, {
 skip: ["get", "post"], // Pulamos 'get' e 'post' porque os tratamos customizadamente acima
 populate: ["modalidade"] // Mantemos para as rotas geradas (ex: PUT, DELETE)
});

router.use(generated);

export default router;
